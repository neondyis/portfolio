html, #__next {
    scroll-behavior: smooth;
    height: 100%;
}

body {
    font-family: Blorado, sans-serif ;
    height: 100%;
    margin: 0;
}

main {
    height: auto;
    div{
        height: 100%;
    }
}

header {
    padding: 50px 0px;
}

nav {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
    padding: 0.5rem 1rem;
}

.nav-container {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
}

@keyframes forward {
    0% {
        opacity: 0;
        transform: translateX(-20px);
    }
    20% {
        transform: translateX(-15px);
    }
    40% {
        transform: translateX(-10px);
    }
    60% {
        transform: translateX(-5px);
    }
    100% {
        transform: translateX(5px);
    }
}

.bounce-icon-right {
    margin-left: 1rem;
    animation-name: forward;
    animation-duration: 0.5s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

@mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch {
    position: relative;
    color: white;
    font-size: 4em;
    /* Animation provies a slight random skew. Check bottom of doc
    for more information on how to random skew. */
    animation: glitch-skew 1s infinite linear alternate-reverse;

    // Creates a copy before our text.
    &::before{
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 2px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -2px 0 #ff00c1;
        /* Creates an initial clip for our glitch. This works in
        a typical top,right,bottom,left fashion and creates a mask
        to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 0);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
        with an alternating animation to keep things fresh. */
        animation: glitch-anim 5s infinite linear alternate-reverse;
    }

    // Creates a copy after our text. Note comments from ::before.
    &::after {
        @include glitchCopy;
        left: -2px;
        text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
        animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
}

/* Creates an animation with 20 steaps. For each step, it calculates
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 10;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(10) - 5) + deg);
        }
    }
}

.footer {
    position: fixed;
    backdrop-filter: blur(6px) saturate(2.5);
    display: flex;
    right: 0px;
    z-index: 999;
    -webkit-box-align: center;
    align-items: center;
    justify-content: space-evenly;
    background: var(--gray-alpha) !important;
    width: 100% !important;
    padding: 0px !important;
    flex-direction: row !important;
    height: 60px !important;
    bottom: 0px !important;
}

.react-pdf__Page{
    border: thin solid;
}